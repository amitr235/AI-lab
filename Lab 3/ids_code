from collections import defaultdict
  
class Graph:
  
    def __init__(self,vertices):
  
        self.V = vertices
  
        self.graph = defaultdict(list)
  
    def addEdge(self,u,v):
        self.graph[u].append(v)
  
    def DLS(self,src,target,maxDepth):
  
        if src == target : return True
  
        if maxDepth <= 0 : return False
  
        for i in self.graph[src]:
                if(self.DLS(i,target,maxDepth-1)):
                    return True
        return False

    def IDS(self,src, target, maxDepth):
  
        for i in range(maxDepth):
            if (self.DLS(src, target, i)):
                return True
        return False
  
if __name__ == "__main__":
    print("Enter number of vertex: ",end="")
    n = int(input())
    g = Graph(n)
    print("Enter no of edges: ",end="")
    noOfEdge = int(input())
    print("Enter edges: ")
    for i in range(noOfEdge):
        edge = list(map(int, input().split(" ")))
        g.addEdge(edge[0],edge[1])
    print("Enter src vertex: ",end="")
    src = int(input())
    print("Enter target vertex: ",end="")
    target = int(input())
    print("Enter maxDepth: ",end="")
    maxDepth = int(input())
    if g.IDS(src, target, maxDepth) == True:
        print ("Target is reachable from source " +
        "within max depth")
    else :
        print ("Target is NOT reachable from source " +
        "within max depth")
